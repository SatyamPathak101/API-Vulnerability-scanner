import requests
import re,os
import concurrent.futures
from urllib.parse import urlparse, parse_qs
import pyfiglet
from datetime import datetime
import argparse
import pickle
import base64

class Color:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    MAGENTA = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    RESET = '\033[0m'  # Reset to default color

def extract_base_url_and_params(url):
    parsed_url = urlparse(url)
    base_url = parsed_url.scheme + "://" + parsed_url.netloc + parsed_url.path
    params = parse_qs(parsed_url.query)
    return base_url, params

def print_banner(text):
    ascii_banner = pyfiglet.figlet_format(text)
    print(ascii_banner)

def Write_report(file_name):

    directory = os.path.dirname(file_name)

    # Create the directory if it doesn't exist
    if not os.path.exists(directory):
        os.makedirs(directory)

    with open(file_name,'a') as file:
        file.write('########################################################################\n\n')
        file.write('   $$      $$$$$$    $$$$   $$   $$   $$$$$\n')
        file.write('  $$$$     $$  $$   $$  $$  $$   $$  $$   $$\n')
        file.write(' $$  $$    $$  $$  $$       $$   $$  $\n')
        file.write(' $$  $$    $$$$$   $$       $$   $$   $$$$$\n')
        file.write(' $$$$$$    $$ $$   $$  $$$  $$   $$       $$\n')
        file.write(' $$  $$    $$  $$   $$  $$  $$   $$  $$   $$\n')
        file.write(' $$  $$   $$$$  $$   $$$$$   $$$$$    $$$$$\n\n')
        file.write('########################################################################\n\n')
        file.write('# ARGUS REPORT\n\n')

        file.write('## OWASP Top 10 Vulnerability list:\n')
        file.write('1. Broken Object Level Authorization\n')
        file.write('2. Broken Authentication\n')
        file.write('3. Broken Object Property Level Authorization\n')
        file.write('4. Unrestricted Resource Consumption\n')
        file.write('5. Broken Function Level Authorization\n')
        file.write('6. Unrestricted Access to Sensitive Business Flows\n')
        file.write('7. Server Side Request Forgery\n')
        file.write('8. Security Misconfiguration\n')
        file.write('9. Improper Inventory Management\n')
        file.write('10. Unsafe Consumption of APIs\n\n')

        file.write('## Vulnerablities as per scan:\n\n')

def check_common_paths(url,report_file_name):
    found = 0
    with open(report_file_name,'a') as file1:
        file1.write("## Common API Paths found\n\n")
        file1.write("Status Code - URL \n\n")
    with open('./db/common_paths.txt','r') as file:
        for endpoint in file:
            furl = url + endpoint.strip()
            req = requests.get(furl)
            if req.status_code == 200:
                found = 1
                
                print(Color.RED + "- Endpoint found: " + Color.RESET + furl)

                with open(report_file_name,'a') as file1:
                    file1.write(f"{req.status_code} - {req.url}" + "\n")

        if found == 0:
            with open(report_file_name,'a') as file1:
                file1.write(f"- Endpoint not found" + "\n")
            print(Color.RED + "- Endpoint not found" + Color.RESET)

def fuzz_directory(url, wordlist_file,report_file_name):
    allowed_status_code = [200,201,301,302,403]
    with open(report_file_name,'a') as file:
        file.write("## Different Directories Found\n\n")

    def check_directory(directory):
        response = requests.get(url + directory.strip(),allow_redirects=True)
        if response.status_code in allowed_status_code:
            if response.status_code == 301:
                print(Color.RED + 'redirction found: ' + Color.RESET)
                print(f"{response.status_code} - {url+directory.strip()} --> {response.url}" + "\n")

                with open(report_file_name,'a') as f:
                    f.write(f"{response.status_code} - {url+directory.strip()} --> {response.url}" + "\n")

            print(Color.RED + "Found: " + Color.RESET + url + directory)
            with open(report_file_name,'a') as file:
                file.write(f"{response.status_code} - {response.url}" + "\n")
    
    with open(wordlist_file, "r") as file:
        wordlist = file.readlines()

    with concurrent.futures.ThreadPoolExecutor() as executor:
        executor.map(check_directory, wordlist)

def information_disclosure(url,report_file_name):

    with open(report_file_name,'a') as file:
        file.write("## Information Disclosure Vulnerability \n\n")

    r = requests.Session()

    with open('./db/usernames.txt','r') as file:
        for name in file:
            req = r.get(url+'api/v3/user/' + name.strip())

            if req.status_code == 200:
                print(f"{name} - {req.text} - {req.url}" + "\n")
                with open(report_file_name,'a') as file1:
                    file1.write(f"{name} - {req.text}" + "\n")
            

def Broken_User_Authentication(url,report_file_name):
    with open(report_file_name,'a') as file:
        file.write("## Broken User Authentication Vulnerability \n\n")

    base_url, params = extract_base_url_and_params(url)
    print("Base URL:", base_url)
    print("Parameters:", params)

    response = requests.get(base_url, params=params)

    if response.status_code == 200:
        user_info = response.json()
        print(Color.GREEN + f"\n[+] User information for user ID {user_info}" + Color.RESET)
    else:
        print(Color.GREEN + "\n[+] Failed to access user information. Status code:" + Color.RESET, response.status_code)
        print(response.text)

    print("\n"+ Color.GREEN + "[+] Checking for others id's .." + Color.RESET)
    with open('./db/ids.txt','r') as f: 
        for other_user_id in f:
            other_user_id = other_user_id.strip()
            response = requests.get(base_url, params={"id": other_user_id})
            if response.status_code == 200:
                print(Color.RED + f"\nVulnerability detected: User information for user ID {other_user_id} accessible without proper authentuthentication." + Color.RESET)
                print(f"{other_user_id} - {response.text}")

                # Audit this to report
                with open(report_file_name,'a') as file:
                    file.write(f"URL for other user: {response.url}" + "\n\n")
                    file.write(f"{other_user_id} - {response.text}" + "\n")

            else:
                print(f"\rThere is no user with user ID {other_user_id}. Status code: {response.status_code}",end="")

def extract_urls(report_file_name):
    urls = []
    with open(report_file_name, 'r') as file:
        for line in file:
            if line.startswith("200"):
                url = line.split(" - ")[1].strip()
                urls.append(url)
    return urls

def detect_insecure_deserialization(url,report_file_name):

    payload = base64.b64encode(pickle.dumps({"username": "admin", "password": "admin"})).decode()
    response = requests.post(url, data={"data": payload})
    if "admin" in response.text:
        print(Color.RED + f"[+] Insecure Deserialization vulnerability detected! for url - {url}" + Color.RESET)
        with open(report_file_name,'a') as file:
            file.write(f"{response.status_code} - {response.url}  ")
            file.write(f"{response.text}")
    else:
        print(Color.CYAN + f"[+] No Insecure Deserialization vulnerability detected. for url - {url}" + Color.RESET)

def test_deserialization_vulnerability(urls,report_file_name):
    for url in urls:
        detect_insecure_deserialization(url,report_file_name)

if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="This is a Basic API Vulnerability scanner")

    parser.add_argument('-u', '--url', help='URL for scanning vulnerability')
    args = parser.parse_args()
    url = args.url

    print_banner("ARGUS")

    parsed_url = urlparse(url)
    base_url = str(parsed_url.netloc)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    filename = 'Reports/' + base_url.replace('.','_').replace(':','_') + '_' + timestamp + '.md'

    print(Color.GREEN + "[+] Report can be found here: " + Color.RESET + Color.YELLOW + filename + Color.RESET)

    # Start creating a report
    Write_report(filename)

    api_pattern = r".*/api/([^?]+)\??.*$"

    if re.match(api_pattern, url):
        matched_segment = re.match(api_pattern, url).group(1)  # Capture the API path segment
        print(Color.GREEN + "\n[+] Check for Broken User Authentication .." + Color.RESET)
        Broken_User_Authentication(url=url,report_file_name=filename)

    else:
        if not url.endswith("/"):
            url = url + '/'

        print(Color.GREEN + "\n[+] Checking for common paths in API URL .." + Color.RESET)
        check_common_paths(url=url,report_file_name=filename)

        print(Color.GREEN + "\n[+] Checking for Information Disclosure Vulnerabilities .." + Color.RESET)
        information_disclosure(url=url,report_file_name=filename)
        
        print(Color.GREEN + "\n[+] Check for different directory .." + Color.RESET)
        fuzz_directory(url=url, wordlist_file="./db/dicc.txt",report_file_name=filename)

        # Insecure Deserialization
        print(Color.GREEN + f"[+] Checking for Insecure deserialization vulnerability .." + Color.RESET)
        with open(filename,'a') as file:
            file.write("## Insecure Deserialization Vulnerability \n\n")
        urls = extract_urls(report_file_name=filename)
        test_deserialization_vulnerability(urls,report_file_name=filename)


